<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fota.trade.mapper.sharding.UsdkOrderMapper" >
  <resultMap id="BaseResultMap" type="com.fota.trade.domain.UsdkOrderDO" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="gmt_create" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="gmt_modified" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="user_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="asset_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="asset_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="order_direction" jdbcType="TINYINT" javaType="java.lang.Integer" />
      <arg column="order_type" jdbcType="TINYINT" javaType="java.lang.Integer" />
      <arg column="total_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="unfilled_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="fee" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="average_price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="order_context" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, gmt_create as gmtCreate, gmt_modified as gmtModified, user_id as userId, asset_id as assetId, asset_name as assetName, order_direction as orderDirection, order_type as orderType,
    total_amount as totalAmount, unfilled_amount as unfilledAmount, price, fee, status, average_price as averagePrice, order_context as orderContext
  </sql>

  <select id="countByQuery" resultType="java.lang.Integer">
    select count(*)
    from trade_usdt_order
    where user_id=#{userId}
    <if test="assetId > 0" >
      and asset_id=#{assetId,jdbcType=INTEGER}
    </if>
    <if test="startTime != null">
      and gmt_create &gt;= #{startTime}
    </if>
    <if test="endTime != null">
      and gmt_create &lt;= #{endTime}
    </if>
    <if test="orderStatus != null and orderStatus.size != 0" >
      and status in
      <foreach item="item" index="index" collection="orderStatus" open="(" separator="," close=")">
        #{item,jdbcType=INTEGER}
      </foreach>
    </if>
  </select>

  <select id="listByQuery" resultType="com.fota.trade.domain.UsdkOrderDO">
    select
    <include refid="Base_Column_List"/>
    from trade_usdt_order
    where user_id=#{userId}
    <if test="assetId > 0" >
      and asset_id=#{assetId}
    </if>
    <if test="startTime != null">
      and gmt_create &gt;= #{startTime}
    </if>
    <if test="endTime != null">
      and gmt_create &lt;= #{endTime}
    </if>
    <if test="orderStatus != null and orderStatus.size != 0" >
      and status in
      <foreach item="item" index="index" collection="orderStatus" open="(" separator="," close=")">
        #{item,jdbcType=INTEGER}
      </foreach>
    </if>
    order by gmt_create desc
    limit #{startRow,jdbcType=INTEGER}, #{endRow,jdbcType=INTEGER}
  </select>

  <select id="listByUserIdAndIds" resultType="com.fota.trade.domain.UsdkOrderDO">
    select
    <include refid="Base_Column_List"/>
    from trade_usdt_order
    where user_id=#{userId}
    <if test="idList != null and idList.size != 0" >
      and id in
      <foreach item="item" index="index" collection="idList" open="(" separator="," close=")">
        #{item,jdbcType=INTEGER}
      </foreach>
    </if>
    order by gmt_create desc
  </select>


  <update id="updateByFilledAmount">
    update trade_usdt_order
    set gmt_modified = #{gmtModified},
    average_price = IF(total_amount - unfilled_amount + #{filledAmount} = 0, null ,
    (IFNULL(average_price,0) * (total_amount - unfilled_amount) + #{filledPrice} * #{filledAmount}) / (total_amount - unfilled_amount + #{filledAmount}))
    ,status = IF(status in(8,9)
          ,IF(unfilled_amount - #{filledAmount} > 0 , 9, 10)
          ,status)
    , unfilled_amount = unfilled_amount - #{filledAmount}
    where user_id=#{userId} and id = #{id} and unfilled_amount >= #{filledAmount}
  </update>

  <insert id="batchInsert" parameterType="com.fota.trade.domain.UsdkOrderDO">
    insert into trade_usdt_order (id, gmt_create, gmt_modified, user_id, asset_id, asset_name, order_direction, order_type,
    total_amount, unfilled_amount, price, fee, status, order_context)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id}, #{item.gmtCreate}, #{item.gmtModified},
      #{item.userId}, #{item.assetId}, #{item.assetName}, #{item.orderDirection}, #{item.orderType}, #{item.totalAmount},
      #{item.unfilledAmount}, #{item.price}, #{item.fee},  #{item.status}, #{item.orderContext})
    </foreach>
  </insert>


</mapper>