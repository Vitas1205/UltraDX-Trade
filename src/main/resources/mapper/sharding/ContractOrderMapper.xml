<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fota.trade.mapper.sharding.ContractOrderMapper">
    <resultMap id="BaseResultMap" type="com.fota.trade.domain.ContractOrderDO">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <constructor>
            <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long"/>
            <arg column="gmt_create" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="gmt_modified" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="user_id" jdbcType="BIGINT" javaType="java.lang.Long"/>
            <arg column="contract_id" jdbcType="BIGINT" javaType="java.lang.Long"/>
            <arg column="contract_name" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="order_direction" jdbcType="TINYINT" javaType="java.lang.Integer"/>
            <arg column="operate_type" jdbcType="TINYINT" javaType="java.lang.Integer"/>
            <arg column="order_type" jdbcType="TINYINT" javaType="java.lang.Integer"/>
            <arg column="operate_direction" jdbcType="TINYINT" javaType="java.lang.Integer"/>
            <arg column="lever" jdbcType="TINYINT" javaType="java.lang.Integer"/>
            <arg column="total_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="unfilled_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="close_type" jdbcType="TINYINT" javaType="java.lang.Integer"/>
            <arg column="price" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="fee" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="status" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="average_price" jdbcType="DECIMAL" javaType="java.math.BigDecimal"/>
            <arg column="order_context" jdbcType="VARCHAR" javaType="java.lang.String"/>
        </constructor>
    </resultMap>
    <!--<sql id="Base_Column_List">-->
        <!--&lt;!&ndash;-->
          <!--WARNING - @mbggenerated-->
          <!--This element is automatically generated by MyBatis Generator, do not modify.-->
        <!--&ndash;&gt;-->
        <!--id, gmt_create as gmtCreate, gmt_modified as gmtModified, user_id as userId, contract_id as contractId,-->
        <!--contract_name as contractName,-->
        <!--order_type as orderType,order_direction as orderDirection,-->
        <!--operate_type as operateType, operate_direction as operateDirection, lever, total_amount as totalAmount,-->
        <!--unfilled_amount as unfilledAmount, close_type as closeType, price, fee,-->
        <!--status, average_price as-->
        <!--averagePrice, order_context as orderContext-->
    <!--</sql>-->

    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, gmt_create , gmt_modified , user_id , contract_id ,
        contract_name ,
        order_type ,order_direction ,
        operate_type , operate_direction , lever, total_amount ,
        unfilled_amount , close_type , price, fee,
        status, average_price , order_context
    </sql>


    <insert id="batchInsert">
         insert into trade_contract_order (id, gmt_create,
            gmt_modified, user_id, contract_id, contract_name, order_direction,
            total_amount, unfilled_amount, price, fee,
            status, average_price, order_type, close_type, order_context)
            values
            <foreach collection="items" item="item" separator=",">
                (#{item.id}, now(3),
                now(3), #{item.userId},
                #{item.contractId}, #{item.contractName},
                #{item.orderDirection},
                #{item.totalAmount}, #{item.unfilledAmount},
                #{item.price}, #{item.fee},
                #{item.status}, #{item.averagePrice}, #{item.orderType}, #{item.closeType}, #{item.orderContext})
            </foreach>
    </insert>

    <select id="countByQuery" resultType="java.lang.Integer">
        select count(*)
        from trade_contract_order
        where 1=1
        <if test="null!= contractId and contractId > 0">
            and contract_id=#{contractId,jdbcType=INTEGER}
        </if>
        <if test="null!=userId and userId > 0">
            and user_id=#{userId,jdbcType=BIGINT}
        </if>
        <if test="startTime != null">
            and gmt_create &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and gmt_create &lt; #{endTime}
        </if>
        <if test="orderStatus != null and orderStatus.size != 0">
            and status in
            <foreach item="item" index="index" collection="orderStatus" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="orderType != null">
            and order_type = #{orderType}
        </if>
    </select>

    <select id="listByQuery" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from trade_contract_order
        where user_id=#{userId}
        <if test="null!= contractId and contractId > 0">
            and contract_id=#{contractId,jdbcType=INTEGER}
        </if>
        <if test="startTime != null">
            and gmt_create &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and gmt_create &lt; #{endTime}
        </if>
        <if test="orderStatus != null and orderStatus.size != 0">
            and status in
            <foreach item="item" index="index" collection="orderStatus" open="(" separator="," close=")">
                #{item,jdbcType=INTEGER}
            </foreach>
        </if>
        <if test="orderType != null">
            and order_type = #{orderType}
        </if>
        <if test="orderDirection != null">
            and order_direction = #{orderDirection}
        </if>
        order by gmt_create desc
        limit #{startRow,jdbcType=INTEGER}, #{endRow,jdbcType=INTEGER}
    </select>


    <update id="updateAmountAndStatus">
    update trade_contract_order
    set
      gmt_modified = #{gmtModified}
        ,average_price = IF(total_amount - unfilled_amount + #{filledAmount} =0, null ,
        (IFNULL(average_price,0) * (total_amount - unfilled_amount) + #{filledPrice} * #{filledAmount}) / (total_amount - unfilled_amount + #{filledAmount}))
        ,status = IF(status in(8,9)
          ,IF(unfilled_amount - #{filledAmount} > 0 , 9, 10)
          ,status)
        ,unfilled_amount = unfilled_amount - #{filledAmount}

    where user_id=#{userId} and id = #{orderId} and unfilled_amount - #{filledAmount} >=0
  </update>

    <!--<update id="batchUpdateAmountAndStatus">-->
    <!--<foreach collection="list" item="item" separator="$">-->
        <!--update trade_contract_order-->
        <!--set-->
        <!--gmt_modified = now(3)-->
        <!--,average_price = IF(total_amount - unfilled_amount + #{item.filledAmount} =0, null ,-->
        <!--(IFNULL(average_price,0) * (total_amount - unfilled_amount) + #{item.filledPrice} * #{item.filledAmount}) / (total_amount - unfilled_amount + #{item.filledAmount}))-->
        <!--,status = IF(status in(8,9)-->
        <!--,IF(unfilled_amount - #{item.filledAmount} > 0 , 9, 10)-->
        <!--,status)-->
        <!--,unfilled_amount = unfilled_amount - #{item.filledAmount}-->

        <!--where user_id=#{item.userId} and id = #{item.id} and unfilled_amount - #{item.filledAmount} >=0-->
    <!--</foreach>-->
  <!--</update>-->


    <select id="listByUserIdAndOrderType" resultType="com.fota.trade.domain.ContractOrderDO">
        select
        <include refid="Base_Column_List" />
        from trade_contract_order
        where user_id = #{userId,jdbcType=BIGINT}
        and status in(8,9)
        <if test="orderTypes != null and orderTypes.size != 0">
            and order_type in
            <foreach item="item" index="index" collection="orderTypes" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        limit 1800
    </select>
    <select id="selectNotEnforceOrderByUserIdAndContractId" resultMap="BaseResultMap">
        select
            id, gmt_create, gmt_modified, user_id, contract_id, contract_name, order_direction,
            operate_type,order_type,close_type, operate_direction, lever, total_amount, unfilled_amount, price,
            fee,  status, average_price, order_context
            from trade_contract_order
            where user_id = #{userId,jdbcType=BIGINT} and contract_id = #{contractId}  and status in (8,9) and order_type != 3
            limit 500
    </select>
    
    
    <select id="selectByUserIdAndIds" resultType="com.fota.trade.domain.ContractOrderDO">
        select <include refid="Base_Column_List"/>
        from trade_contract_order
        where user_id = #{userId,jdbcType=BIGINT}
        <if test="items != null and items.size != 0">
            and id in
            <foreach item="item" index="index" collection="items" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>
</mapper>